module default {
  global currentUserDisplayName: str;

  abstract type Record {
    required createdAt: datetime {
      readonly := true;
      rewrite insert using(datetime_of_statement());
      default := datetime_of_statement();
    }
  }

  type Account extending Record {
    required email: str {
      constraint exclusive;
      constraint min_len_value(3);
      constraint max_len_value(128);
    }
    required password: str {
      constraint min_len_value(8);
      constraint max_len_value(64);
    }
    required refreshTokenVersion: int32 {
      constraint min_value(0);
      rewrite insert using(0);
      default := 0;
    }
  }

  type User extending Record {
    required account: Account {
      on source delete delete target;
      constraint exclusive;
    }
    required displayName: str {
      constraint exclusive;
      constraint min_len_value(3);
      constraint max_len_value(16);
    }
    required name: str {
      constraint exclusive;
      constraint min_len_value(3);
      constraint max_len_value(64);
    }
    description: str {
      constraint max_len_value(256);
    }
    location: str {
      constraint min_len_value(2);
      constraint max_len_value(64);
    }
    required followerCount: int32 {
      rewrite insert using(0);
      default := 0;
    }
    property isFollowing := (
      select exists (
        select Follow filter .follower.displayName = global currentUserDisplayName and .followee.id = User.id
      )
    );
  }

  type Post extending Record {
    required author: User {
      on target delete delete source;
    }
    required content: str {
      constraint min_len_value(16);
      constraint max_len_value(512);
    }
    required bookmarkCount: int32 {
      rewrite insert using(0);
      default := 0;
    }
    required favouriteCount: int32 {
      rewrite insert using(0);
      default := 0;
    }
    property isBookmarked := (
      select exists (
        select Bookmark filter .post.id = Post.id and .user.displayName = global currentUserDisplayName
      )
    );
    property isFavourite := (
      select exists (
        select Favourite filter .post.id = Post.id and .user.displayName = global currentUserDisplayName
      )
    );
  }

  type Favourite extending Record {
    required user: User {
      on target delete delete source;
    }
    required post: Post {
      on target delete delete source;
    }
    required favouritedAt: datetime {
      rewrite insert using(datetime_of_statement());
      default := datetime_of_statement();
    }

    trigger increment_favourite_count after insert for each do (
      update Post 
      filter .id = __new__.post.id
      set { favouriteCount := .favouriteCount + 1 } 
    );

    trigger decrement_favourite_count after delete for each do (
      update Post 
      filter .id = __old__.post.id
      set { favouriteCount := .favouriteCount - 1 } 
    );

    constraint exclusive on (( .user, .post ));
  }

  type Bookmark extending Record {
    required user: User {
      on target delete delete source;
    }
    required post: Post {
      on target delete delete source;
    }
    required bookmarkedAt: datetime {
      rewrite insert using(datetime_of_statement());
      default := datetime_of_statement();
    }

    trigger increment_bookmark_count after insert for each do (
      update Post 
      filter .id = __new__.post.id
      set { bookmarkCount := .bookmarkCount + 1 } 
    );

    trigger decrement_bookmark_count after delete for each do (
      update Post 
      filter .id = __old__.post.id
      set { bookmarkCount := .bookmarkCount - 1 } 
    );

    constraint exclusive on (( .user, .post ));
  }

  type Follow extending Record {
    required follower: User {
      on target delete delete source;
    }
    required followee: User {
      on target delete delete source;
    }

    trigger increment_followee_followers after insert for each do (
      update User 
      filter .id = __new__.followee.id
      set { followerCount := .followerCount + 1 } 
    );

    trigger decrement_followee_followers after delete for each do (
      update User 
      filter .id = __old__.followee.id
      set { followerCount := .followerCount - 1 } 
    );

    constraint exclusive on (( .follower, .followee ));
  }
}
